b0=b1=b2=1
###creating standardized data by taking normal values with mean and variance of 0 and 1
eleavation = rnorm(100,0,1)##for every tree we need an eleavtion value, length of data and mean and variance
ndvi= rnorm(100,0,1)
lambda=exp(b0+b1*elevation+b2*ndvi)
y=rpois(100,lambda)
b0=b1=b2=1
###creating standardized data by taking normal values with mean and variance of 0 and 1
elevation = rnorm(100,0,1)##for every tree we need an eleavtion value, length of data and mean and variance
ndvi= rnorm(100,0,1)
lambda=exp(b0+b1*elevation+b2*ndvi)
y=rpois(100,lambda)
hist(y)
data=data.frame(y=y, x1=eleavation, x2=ndvi)
data
elevation
?optim
param<- read.csv("estimated parameters.csv", header=T)
param
mean(param$b0)
confint(param$b0)
confint(param$b0)
confint(param$b0)
confint(param$b1)
mean(b1)
mean(param$b1)
mean(param$b2)
mean(param$b)
mean(param$theta2)
quantile(b0)
quantile(param$b0)
confint(param$b0)
?quantile
quantile(param$b0,c(0.025,0.975))
mean(param$b0)
m.b1<-mean(param$b0)
m.b2<-mean(param$b1)
m.b3<-mean(param$b)
m.theta<-mean(param$theta2)
quantile(param$b0,c(0.025,0.975))
quantile(param$b1,c(0.025,0.975))
quantile(param$b,c(0.025,0.975))
quantile(param$theta,c(0.025,0.975))
mean<- c(m.b1,m.b2,m.b3,m.theta)
mean
c1<-quantile(param$b0,c(0.025,0.975))
c2<-quantile(param$b1,c(0.025,0.975))
c3<-quantile(param$b,c(0.025,0.975))
c4<-quantile(param$theta,c(0.025,0.975))
CI<- c(c1,c2,c3,c4)
mean
CI
library(dplyr)
param %>%
mutate(param, param2= (exp(b0+b1*3)*10)/b+10)
param
param %>%
mutate(param, param2= (exp(b0+b1*3)*10)/b+10))
param %>%
mutate(param, param2= (exp(b0+b1*3)*10)/(b+10))
param %>%
mutate(param, param2= (exp(param$b0+param$b1*3)*10)/(param$b+10))
param2= (exp(param$b0+param$b1*3)*10)/(param$b+10))
param2= exp((param$b0+param$b1*3)*10))/(param$b+10))
param2= exp((param$b0+param$b1*3)*10))/(param$b+10)
param2= exp((param$b0+param$b1*3)*10)/(param$b+10)
param2
plot(density(param2),type='l')
mean(param2)
quantile(param2)
quantile(param2, c(0.025,0.975))
param2= exp(b0+b1*3)*10/(b+10)
param2= exp(param$b0+param$b1*3)*10/(param$b+10)
plot(density(param2),type='l')
mean(param2)
quantile(param2, c(0.025,0.975))
meab(param>6)
mean(param>6)
mean(param2>6)
time=seq(1:10,1)
time=c(1,2,3,4,5,6,7,8,9,10)
time= seq(1:100, by=1)
time= seq(1:100, by=1)
time= seq(1,100, by=1)
param3= exp(param$b0+param$b1*3)*time/(param$b+time)
length(param3)
plot(density(param3))
plot(param3,time)
param3
plot(time, param3)
plot(time, param3[1:100])
plot(time, param3[1:100], type='l')
biomass<- c(1:100)
time= seq(0,100, by=1)
ntime= length(time)
meanpertime<- mean(param3= exp(param$b0+param$b1*3)*time/(param$b+time))
for 1:length(time)  {
meanpertime<- mean(param3= exp(param$b0+param$b1*3)*time[i]/(param$b+time[i]))
print(meanpertime)
}
meanpertime<- mean(param3= exp(param$b0+param$b1*3)*time/(param$b+time))
meanpertime<- mean(param3= exp(param$b0+param$b1*3)*time/(param$b+time))
time= seq(0,100, by=1)
ntime= length(time)
param3= exp(param$b0+param$b1*3)*time/(param$b+time)
param3= exp(param$b0+param$b1*3)*time/(param$b+time)
for 1:ntime  {
meanpertime<- param3= exp(param$b0+param$b1*3)*time[i]/(param$b+time[i])
print(mean(meanpertime))
}
for 1:ntime{
meanpertime<- param3= exp(param$b0+param$b1*3)*time[i]/(param$b+time[i])
print(mean(meanpertime))
}
for 1:ntime{
meanpertime<- param3= exp(param$b0+param$b1*3)*time[i]/(param$b+time[i])
print(mean(meanpertime))
}
for 1:ntime{
param3= exp(param$b0+param$b1*3)*time[i]/(param$b+time[i])
print(mean(param3))
}
for (i in 1:ntime{
param3= exp(param$b0+param$b1*3)*time[i]/(param$b+time[i])
print(mean(param3))
}
plot(time,meanpertime, type='l')
for (i in 1:ntime) {
param3= exp(param$b0+param$b1*3)*time[i]/(param$b+time[i])
print(mean(param3))
}
plot(time,meanpertime, type='l')
for (i in 1:ntime) {
param3= exp(param$b0+param$b1*3)*time[i]/(param$b+time[i])
mean<-print(mean(param3))
}
plot(time,mean, type='l')
for (i in 1:ntime) {
param3= exp(param$b0+param$b1*3)*time[i]/(param$b+time[i])
mean2<-print(mean(param3))
}
plot(time,mean, type='l')
res=rep(NA, ntime)
res1<- matrxi(NA,ntime,2)
res1<- matrix(NA,ntime,2)
for (i in 1:ntime) {
param3= exp(param$b0+param$b1*3)*time[i]/(param$b+time[i])
res[i]=mean(param3)
}
plot(time,mean, type='l')
for (i in 1:ntime) {
param3= exp(param$b0+param$b1*3)*time[i]/(param$b+time[i])
res[i]=mean(param3)
}
plot(time,res, type='l')
for (i in 1:ntime) {
param3= exp(param$b0+param$b1*3)*time[i]/(param$b+time[i])
res1[i]=mean(param3)
res1[i,]= quantile(param3, c(0.025,0.975))
}
for (i in 1:ntime) {
param3= exp(param$b0+param$b1*3)*time[i]/(param$b+time[i])
res1[i]=mean(param3)
res1[i,]= quantile(param3, c(0.025,0.975))
}
plot(time,res, type='l', add=T)
res1[i]
print(res1)
for (i in 1:ntime) {
param3= exp(param$b0+param$b1*3)*time[i]/(param$b+time[i])
res1[i]=mean(param3)
res1[i,]= quantile(param3, c(0.025,0.975))
}
res1
res=rep(NA, ntime)
res
res1<- matrix(NA,ntime,2)
res1
for (i in 1:ntime) {
param3= exp(param$b0+param$b1*3)*time[i]/(param$b+time[i])
res1[i]=mean(param3)
res1[i,]= quantile(param3, c(0.025,0.975))
}
for (i in 1:ntime) {
param3= exp(param$b0+param$b1*3)*time[i]/(param$b+time[i])
res1[i]=mean(param3)
res1[i,]= quantile(param3, c(0.025,0.975))
print(res1)
}
plot(time,res, type='l', add=T)
plot(time,res, type='l')
plot(time,res1, type='l')
for (i in 1:ntime) {
param3= exp(param$b0+param$b1*3)*time[i]/(param$b+time[i])
res1[i,]= quantile(param3, c(0.025,0.5,0.975))
print(res1)
}
plot(time,res1, type='l')
for (i in 1:ntime) {
param3= exp(param$b0+param$b1*3)*time[i]/(param$b+time[i])
res1[i,]= quantile(param3, c(0.025,0.5,0.975))
print(res1)
}
plot(time,res1[1,], type='l')
res=rep(NA, ntime)
res1<- matrix(NA,ntime,2)
res=rep(NA, ntime)
res1<- matrix(NA,ntime,2)
res1<- matrix(NA,ntime,2)
for (i in 1:ntime) {
param3= exp(param$b0+param$b1*3)*time[i]/(param$b+time[i])
res1[i,]= quantile(param3, c(0.025,0.5,0.975))
print(res1)
}
plot(time,res1[,1], type='l')
time= seq(0,100, by=1)
ntime= length(time)
res=rep(NA, ntime)
res1<- matrix(NA,ntime,2)
for (i in 1:ntime) {
param3= exp(param$b0+param$b1*3)*time[i]/(param$b+time[i])
res1[i,]= quantile(param3,c(0.025,0.5,0.975))
print(res1)
}
plot(time,res1[,1], type='l')
plot(time,res1[,1], type='l', ylim= range(res1))
res=rep(NA, ntime)
res1<- matrix(NA,ntime,2)
for (i in 1:ntime) {
param3= exp(param$b0+param$b1*3)*time[i]/(param$b+time[i])
res1[i,]= quantile(param3,c(0.025,0.5,0.975))
print(res1)
}
res=rep(NA, ntime)
res1<- matrix(NA,ntime,2)
for (i in 1:ntime) {
param3= exp(param$b0+param$b1*3)*time[i]/(param$b+time[i])
res1[i,]= quantile(param3,c(0.025,0.5,0.975))
print(res1)
}
res=rep(NA, ntime)
res1<- matrix(NA,ntime,3)
for (i in 1:ntime) {
param3= exp(param$b0+param$b1*3)*time[i]/(param$b+time[i])
res1[i,]= quantile(param3,c(0.025,0.5,0.975))
print(res1)
}
plot(time,res1[,1], type='l', ylim= range(res1))
lines (time, res[1,], type = 'l', color='blue')
plot(time,res1[,2], type='l', ylim= range(res1), add=T)
plot(time,res1[,2], type='l', ylim= range(res1), add=T)
plot(time,res1[,2], type='l', ylim= range(res1))
plot(time,res1[,2], type='l', ylim= range(res1), add=T)
plot(time,res1[,2], type='l', ylim= range(res1))
plot(time,res1[,2], type='l', ylim= range(res1))
lines(time, res1[,1], type = 'l', color='blue')
plot(time,res1[,2], type='l', ylim= range(res1))
plot(time,res1[,2], type='l', ylim= range(res1))
lines(time, res1[,1], type = 'l', col='blue')
plot(time,res1[,2], type='l', ylim= range(res1))
lines(time, res1[,1], type = 'l', col='blue')
lines(time, res1[,3], type = 'l', col='blue')
x1=2*pi*seq(from=0,to=,length.out=1000)
y=sin(x1)
plot(x1,y)
plot(x1,y)
first="VRATIKA"
last="Chaudhary"
full= c(first,last)
full
rm(list=ls(all=T))
set.seed(1)
delta.true=delta=0.3
N=200 #true population size
T1=4
D1=matrix(0,N,T1)
for (i in 1:T1){
D1[,i]=rbinom(N,size=1,p=delta)
}
cond=apply(D1,1,sum)!=0
data1=D1[cond,]
nrow(data1) #number of individuals we get to observe at least once
cond=apply(D1,1,sum)==0
data1=D1[cond,]
nrow(data1)
rm(list=ls())
set.seed()
set.seed(1)
D1= matrix(NA,N,T1)
#lets fill the empty matrix for each survey
for(i in 1:T1){
D1[,i]= rbinom(N,size = 1, prob=delta.true[i])
D1= matrix(NA,N,T1)
#lets fill the empty matrix for each survey
for(i in 1:T1){
D1[,i]= rbinom(N,size = 1, prob=delta.true[i])
}
D1
#samp.pi
samp.pi= function (param.N){
soma.21= sum(param$z1)
a1=soma.21=z1+a.pi
b1=N-soma.Z1-b.pi
rbeta(1,a1,bi)
}#delta
samp.delta=sunction(param,T1){
cond=parama$z1==1
tot.detect =sum(data[cond])
tot.nopport= sum(cond)*T1
a1=tot.detect+a.delta
b1=tot.noapport+tot.detect+b.delta
for(i in 1:T1){
delta[i]<-rbeta(1,a1,b1)
}
delta
}
###samp.z
samp.z1= function(param,T1){
prob1.tmp=((1-param$delta)^T1) * param$pi
prob0.tmp=(1-param$pi)
prob1=prob1.tmp/(prob1.tmp-prob0.tmp)
cond=apply(dat,1,sum)==0
z1=rep(1,N)
z1[cond]=rbinom(sum(cond), size=1,prob1)
z1
}
############
#############Creating fake data#######
rm(list=ls())
set.seed(1)
#THE POPULATION
N=400
#surveYs
T1=4
#starting deltas
delta.true=c(0.5,0.5,0.5,0.5)
###data
D1= matrix(NA,N,T1)
#lets fill the empty matrix for each survey
for(i in 1:T1){
D1[,i]= rbinom(N,size = 1, prob=delta.true[i])
}
cond=apply(D1,1,sum)!=0##create a condition for the data so that not everything is o
data=D1[cond,]
nrow=(data)
#write.csv(data,"testdata_pop.csv")
data
rm(list=ls())
set.seed(1)
data=data
data
write.csv(data,"testdata_pop.csv")
rm(list=ls())
set.seed(1)
#THE POPULATION
N=400
#surveYs
T1=4
#starting deltas
delta.true=c(0.5,0.5,0.5,0.5)
###data
D1= matrix(NA,N,T1)
#lets fill the empty matrix for each survey
for(i in 1:T1){
D1[,i]= rbinom(N,size = 1, prob=delta.true[i])
}
cond=apply(D1,1,sum)!=0##create a condition for the data so that not everything is o
data=D1[cond,]
nrow=(data)
write.csv(data,"testdata_pop.csv")
data=read.csv("testdata_pop.csv")
n=400
z=rbinom(n,size=1,prob=0.2)
a.prior= 1 ##just real number parameters
b.prior= 1
pi.old= 0.5
pi.new=runif(1)
pi.new
target.pi.old=dbinom(z,size=1,prob=pi.old,log=T)
target.pi.old=sum(dbinom(z,size=1,prob=pi.old,log=T))
target.pi.old
target.pi.old=sum(dbinom(z,size=1,prob=pi.old,log=T)+
dbeta(pi.old,a.prior,b.prior,log=T))
target.pi.old
target.pi.new=sum(dbinom(z,size=1,prob=pi.new,log=T)+
dbeta(pi.new,a.prior,b.prior,log=T))
target.pi.new
pthresh=min(c(1, exp(target.pi.new-target.pi.old)))
pthresh
rand=runif(1)
rand<pthresh
accept=rand<pthresh
rand=runif(1)
accept=rand<pthresh
rand=runif(1)
accept=rand<pthresh
accept
rand=runif(1)
accept=rand<pthresh
accept
